AddSubExpr ::= MulDivExpr ([+|-] MulDivExpr)*
MulDivExpr ::= ArithFactorExpr ([*|/] ArithFactorExpr)*
ArithFactorExpr ::= (AddSubExpr) | NumericValue
NumericValue ::= Id | DiceGroup | Int

ArithmeticExpression ::= AddSubExpr

---

OrExpr ::= AndExpr (|| AndExpr)*
AndExpr ::= BoolFactorExpr (&& BoolFactorExpr)*
BoolFactorExpr ::= (OrExpr) | RelationalExpr | NotExpr | BoolValue
NotExpr ::= ! OrExpr
BoolValue ::= BoolId | Bool
RelationalExpr ::= ArithmeticExpression [<|>|==] ArithmeticExpression
ConditionalExpr ::= OrExpr

BoolId ::= Id [Not(Operator)]

---

IfElseExpr ::= if ConditionalExpr then Expr else Expr
LetExpr ::= let Id = Expr in Expr

FuncDefExpr ::= fun(Id) => Expr
FuncApplyExpr ::= FuncFactor (Expr) [(Expr)]*

FuncFactor ::= (FuncDefExpr) | Id

Expr ::= ConditionalExpr | LetExpr | IfElseExpr | FuncDefExpr | FuncApplyExpr | ArithmeticExpr



// Value ::= Id | Bool | Int | DiceGroup